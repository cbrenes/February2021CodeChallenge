//
//  ImagesListPresenter.swift
//  CodeChallenge
//
//  Created by Cesar Brenes on 19/2/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ImagesListPresentationLogic {
    func presentDataSource(response: ImagesList.DataSource.Response)
}

class ImagesListPresenter: ImagesListPresentationLogic {
    weak var viewController: ImagesListDisplayLogic?
    
    func presentDataSource(response: ImagesList.DataSource.Response) {
        guard let error = response.errorFound else {
            if response.totalNumberOfElements == 0 {
                viewController?.displayDataSourceEmptyState(viewModel: ImagesList.DataSource.ViewModel.EmptyState(message: LocalizationHelper.youDontHaveAnyPhotosYet.localizedString()))
            }
            if let items = response.items {
                let result = items.map({ImagesList.DataSource.ViewModel.Succes.DisplayObject(thumbnailUrl: URL(string: $0.thumbnailUrl))})
                viewController?.displayDataSourceSuccess(viewModel: ImagesList.DataSource.ViewModel.Succes(numberOfPreviousItems: response.numberOfPreviousItems, displayObjects: result, totalNumberOfElements: response.totalNumberOfElements, indexPathToInsert: createIndexPathListToInsert(response: response)))
            }
            return
        }
        handleDataSourceError(error: error)
    }
    
    func createIndexPathListToInsert(response: ImagesList.DataSource.Response) -> [IndexPath]? {
        if response.numberOfPreviousItems == 0 || response.items?.isEmpty ?? true {
            return nil
        }
        var counter = 0
        var indexPathList = [IndexPath]()
        while counter < response.items?.count ?? 0 {
            indexPathList.append(IndexPath(row: response.numberOfPreviousItems + counter, section: 0))
            counter += 1
        }
        return indexPathList
    }
    
    func handleDataSourceError(error: APIError) {
        let title = LocalizationHelper.errorFound.localizedString()
        let leftButtonMessage = LocalizationHelper.cancel.localizedString()
        let rightButtonMessage = LocalizationHelper.retry.localizedString()
        var message = LocalizationHelper.serverError.localizedString()
        switch error {
        case .networkError(let error):
            if (error as NSError?)?.code == NSURLErrorNotConnectedToInternet {
                message = LocalizationHelper.noInternetConnectionMakeSureThatWifiOrMobileDataIsTurnedONThenTryAgain.localizedString()
            }
        default:
            break
        }
        viewController?.displayDataSourceErrorFound(viewModel: ImagesList.DataSource.ViewModel.ErrorFound(title: title, message:  message, leftButtonTitle: leftButtonMessage, rightButtonTitle: rightButtonMessage, tableViewErrorMessage: LocalizationHelper.aProblemOcurredPleaseTryAPullDownToRefresh.localizedString()))
    }
}
